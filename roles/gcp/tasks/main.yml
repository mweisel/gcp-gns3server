---
- name: create firewall rule (wireguard)
  gcp_compute_firewall:
    name: "{{ gcp_fr_name }}"
    allowed:
      - ip_protocol: udp
        ports:
          - '51820'
    target_tags:
      - "{{ gcp_tag }}"
    project: "{{ gcp_project_id }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file_dir }}/{{ gcp_cred_file }}"
    state: present

- name: create disk
  gcp_compute_disk:
    name: "{{ gcp_disk_name }}"
    size_gb: "{{ gcp_disk_size }}"
    type: "{{ gcp_disk_type }}"
    source_image: "projects/ubuntu-os-cloud/global/images/family/{{ gcp_disk_image }}"
    licenses:
      - 'https://www.googleapis.com/compute/v1/projects/vm-options/global/licenses/enable-vmx' 
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project_id }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file_dir }}/{{ gcp_cred_file }}"
    state: present
  register: disk

- name: create vm instance
  gcp_compute_instance:
    name: "{{ gcp_vm_name }}"
    machine_type: "{{ gcp_vm_type }}"
    min_cpu_platform: "{{ gcp_vm_cpu }}"
    disks:
      - auto_delete: no
        boot: yes
        source: "{{ disk }}" 
    network_interfaces:
      - access_configs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
    scheduling:
      preemptible: "{{ gcp_vm_preemptible }}"
    service_accounts:
      - email: "{{ gcp_svc_acct_id }}@{{ gcp_project_id }}.iam.gserviceaccount.com"
        scopes:
          - https://www.googleapis.com/auth/cloud-platform
    tags:
      items:
        - "{{ gcp_tag }}"
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project_id }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file_dir }}/{{ gcp_cred_file }}"
    state: present
  register: vm

- name: verify vm instance is up
  fail:
    msg: "The VM instance is not in the RUNNING state."
  when: "'RUNNING' not in vm.status"

# $HOME/.ssh/config
- name: create/update host entry for local ssh config
  command: gcloud compute config-ssh --quiet --project {{ gcp_project_id }}
  changed_when: no

- name: create var for public ipv4 address
  set_fact:
    public_ip: "{{ vm.networkInterfaces[0].accessConfigs[0].natIP }}"

- name: wait for ssh connection to become available
  wait_for:
    host: "{{ public_ip }}"
    port: 22
    delay: 10
    timeout: 60

- name: add host to group
  add_host:
    name: "{{ public_ip }}"
    group: gns3
  changed_when: no
...
